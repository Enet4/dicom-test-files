import hashlib
import os


def file_hashes():
    """Returns a generator of file names and their sha256 hashes"""
    for root, directories, file_names in os.walk('./data'):
        for file_name in file_names:
            path = os.path.join(root, file_name)
            name = path.replace('./data/', '')
            hash = get_hash(path)
            yield (name, hash)


def get_hash(path):
    """Returns the sha2566 hash of a given path"""
    BUF_SIZE = 1024 * 4
    sha256 = hashlib.sha256()

    with open(path, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                return sha256.hexdigest()
            sha256.update(data)


class MultiGeneator:
    def __init__(self, *generators):
        self.generators = generators

    def add(self, name, hash):
        for generator in self.generators:
            generator.add(name, hash)

    def finish(self):
        for generator in self.generators:
            generator.finish()


def generate_rust(hashes):
    with open('./rust/src/hashes.rs', 'w+') as f:
        f.writelines([
            '// DO NOT MANUALLY EDIT THIS FILE\n',
            '// THIS FILE IS GENERATED BY ./generate/generate.py\n\n',
            'pub const FILE_HASHES: &[(&str, &str)] = &[\n',
        ])
        f.writelines(
            f'    ("{name}", "{hash}"),\n' for (name, hash) in hashes
        )
        f.write('];\n')
        print('Generated ./rust/src/hashes.rs')


def main():
    hashes = sorted(file_hashes())

    generate_rust(hashes)


if __name__ == '__main__':
    main()
